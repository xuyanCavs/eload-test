<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eload.dao.BankInfoMapper" >
  <resultMap id="BaseResultMap" type="com.eload.pojo.BankInfo" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="uid" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="bankname" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="accountname" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="banknumber" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="bankforkname" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, uid, bankname, accountname, banknumber, bankforkname
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.eload.pojo.BankInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bankinfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bankinfo
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bankinfo
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.eload.pojo.BankInfoExample" >
    delete from bankinfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.eload.pojo.BankInfo" >
    insert into bankinfo (id, uid, bankname, 
      accountname, banknumber, bankforkname
      )
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{bankname,jdbcType=VARCHAR}, 
      #{accountname,jdbcType=VARCHAR}, #{banknumber,jdbcType=VARCHAR}, #{bankforkname,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.eload.pojo.BankInfo" >
    insert into bankinfo
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="bankname != null" >
        bankname,
      </if>
      <if test="accountname != null" >
        accountname,
      </if>
      <if test="banknumber != null" >
        banknumber,
      </if>
      <if test="bankforkname != null" >
        bankforkname,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="bankname != null" >
        #{bankname,jdbcType=VARCHAR},
      </if>
      <if test="accountname != null" >
        #{accountname,jdbcType=VARCHAR},
      </if>
      <if test="banknumber != null" >
        #{banknumber,jdbcType=VARCHAR},
      </if>
      <if test="bankforkname != null" >
        #{bankforkname,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.eload.pojo.BankInfoExample" resultType="java.lang.Integer" >
    select count(*) from bankinfo
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bankinfo
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null" >
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.bankname != null" >
        bankname = #{record.bankname,jdbcType=VARCHAR},
      </if>
      <if test="record.accountname != null" >
        accountname = #{record.accountname,jdbcType=VARCHAR},
      </if>
      <if test="record.banknumber != null" >
        banknumber = #{record.banknumber,jdbcType=VARCHAR},
      </if>
      <if test="record.bankforkname != null" >
        bankforkname = #{record.bankforkname,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bankinfo
    set id = #{record.id,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      bankname = #{record.bankname,jdbcType=VARCHAR},
      accountname = #{record.accountname,jdbcType=VARCHAR},
      banknumber = #{record.banknumber,jdbcType=VARCHAR},
      bankforkname = #{record.bankforkname,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.eload.pojo.BankInfo" >
    update bankinfo
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="bankname != null" >
        bankname = #{bankname,jdbcType=VARCHAR},
      </if>
      <if test="accountname != null" >
        accountname = #{accountname,jdbcType=VARCHAR},
      </if>
      <if test="banknumber != null" >
        banknumber = #{banknumber,jdbcType=VARCHAR},
      </if>
      <if test="bankforkname != null" >
        bankforkname = #{bankforkname,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.eload.pojo.BankInfo" >
    update bankinfo
    set uid = #{uid,jdbcType=INTEGER},
      bankname = #{bankname,jdbcType=VARCHAR},
      accountname = #{accountname,jdbcType=VARCHAR},
      banknumber = #{banknumber,jdbcType=VARCHAR},
      bankforkname = #{bankforkname,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>